{
	"info": {
		"_postman_id": "0be79233-ed90-4356-8dd2-43a6a66c32de",
		"name": "0Posts Controller Collection",
		"description": "WorkSpace: **Blogifi Application**\n\nEnvironment: Blogifi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20977820",
		"_collection_link": "https://galactic-desert-826071.postman.co/workspace/BlogifiApplication~c3a0d903-336d-462a-8184-36c6d875aea3/collection/20977820-0be79233-ed90-4356-8dd2-43a6a66c32de?action=share&source=collection_link&creator=20977820"
	},
	"item": [
		{
			"name": "Part1",
			"item": [
				{
					"name": "getAllPosts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:46:26 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"python\",\n        \"desc\": \"py Desc\",\n        \"tags\": [\n            \"it\",\n            \"Python developer\"\n        ]\n    },\n    {\n        \"id\": 2,\n        \"title\": \"java\",\n        \"desc\": \"java Desc\",\n        \"tags\": [\n            \"it\",\n            \"spring\",\n            \"java developer\"\n        ]\n    },\n    {\n        \"id\": 3,\n        \"title\": \"React Native\",\n        \"desc\": \"RN Desc\",\n        \"tags\": [\n            \"RN\",\n            \"React Native\",\n            \"java developer\"\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 3,\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 3,\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:46:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Created Successfully"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 3,\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/2",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:46:11 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"title\": \"java\",\n    \"desc\": \"java Desc\",\n    \"tags\": [\n        \"it\",\n        \"spring\",\n        \"java developer\"\n    ]\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id 3",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:51:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id 3 +ve Synario",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 4,\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:48:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						},
						{
							"name": "Update Partial Post By Id 4 -ve Testing",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 4,\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"4"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:48:45 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T00:48:45.145+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User with Id 4 Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:32)\\r\\n\\tat com.example.Blogifi.controller.PostController.UpdatePartialPostById(PostController.java:52)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:888)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User with Id 4 Not Found\",\n    \"path\": \"/posts/4\"\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:54:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Deleted Successfully"
						}
					]
				}
			]
		},
		{
			"name": "Part2 (Removed Tags)",
			"item": [
				{
					"name": "getAllPosts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:00:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"title\": \"java\",\n        \"desc\": \"java Desc\"\n    },\n    {\n        \"id\": 1,\n        \"title\": \"python\",\n        \"desc\": \"py Desc\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"React Native\",\n        \"desc\": \"RN Desc\"\n    },\n    {\n        \"id\": 0,\n        \"title\": \"React Native\",\n        \"desc\": \"RN Desc\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 3, // Auto increment is not added so we need to pass the Id too.. // or it will take default value // and if some value is present it will update the same\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Desc\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 3, // Auto increment is not added so we need to pass the Id too.. // or it will take default value // and if some value is present it will update the same\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Desc\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:00:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Created Successfully"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/2",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:01:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"title\": \"java\",\n    \"desc\": \"java Desc\"\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id 3",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 00:51:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id with Id that is Present",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:05:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						},
						{
							"name": "Update Partial Post By Id that is not present",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"5"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:05:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T04:05:55.828+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User with Id 5 Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:32)\\r\\n\\tat com.example.Blogifi.controller.PostController.UpdatePartialPostById(PostController.java:65)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:888)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User with Id 5 Not Found\",\n    \"path\": \"/posts/5\"\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:08:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "Removed Tags from Post Entity  \nPost Entity holds only title and desc of type string  \nRemoved HashMap Tags"
		},
		{
			"name": "Part3 in MySQL",
			"item": [
				{
					"name": "getAllPosts",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:47:56 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"id\": 3, // Auto increment is not added so we need to pass the Id too.. // or it will take default value // and if some value is present it will update the same\r\n    \"title\": \"React Native\",\r\n    \"description\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React Native\",\r\n        \"java developer\"\r\n    ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Desc\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        // \"id\": 3, // Auto increment is not added so we need to pass the Id too.. // or it will take default value // and if some value is present it will update the same\r\n        \"title\": \"React Native\",\r\n        \"desc\": \"RN Desc\",\r\n        \"tags\": [\r\n            \"RN\",\r\n            \"React Native\",\r\n            \"java developer\"\r\n        ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Desc\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:48:45 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"React Native\",\n    \"message\": \"Post Created Successfully \",\n    \"description\": null\n}"
						},
						{
							"name": "Create Posts with proper Params",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    // \"id\": 3, // Auto increment is not added so we need to pass the Id too.. // or it will take default value // and if some value is present it will update the same\r\n    \"title\": \"React Native\",\r\n    \"description\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React Native\",\r\n        \"java developer\"\r\n    ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Desc\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:50:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"title\": \"React Native\",\n    \"message\": \"Post Created Successfully \",\n    \"description\": \"RN Desc\"\n}"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/2",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 04:01:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"title\": \"java\",\n    \"desc\": \"java Desc\"\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n    \"title\": \"React\",\r\n    \"desc\": \"R Desc\",\r\n    \"tags\": [\r\n        \"R\",\r\n        \"React\",\r\n        \"developer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id 3 not-exist 404",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"React\",\r\n        \"desc\": \"R Desc\",\r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:50:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T13:50:46.629+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User With 3Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.lambda$getpost$0(PostService.java:43)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:43)\\r\\n\\tat com.example.Blogifi.services.PostService.Update(PostService.java:47)\\r\\n\\tat com.example.Blogifi.controllers.PostController.UpdatePostById(PostController.java:56)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User With 3Not Found\",\n    \"path\": \"/posts/3\"\n}"
						},
						{
							"name": "Update Post By Id with 2 that exists",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n    \"title\": \"React\",\r\n    \"desc\": \"R Desc\",\r\n    \"tags\": [\r\n        \"R\",\r\n        \"React\",\r\n        \"developer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:51:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:52:31 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"title\": \"Reactive\",\n    \"message\": \"Post Updated Successfully\",\n    \"description\": null\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:52:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "> 1\\. MySQL setup in pom.xml and in application.properties mysql-connector-j  \n2\\. Updated MySQLQuerie.sql  \n3\\. Used @Entity form jakarta from spring-boot-Starter-data-JPA Dependency  \n4\\. @Entity name will create same in Database @Id \\[PK\\] @GenerateValue(strategy = GenerationType.IDENTITY)  \n5\\. Add - JPA Repository Package &gt; PostRepository.java Interface extends JpaRepository with its DataType in TableName, PK type&lt;Posts, Integer&gt;  \n6\\. Add - RequestDto and ResponseDto ()"
		},
		{
			"name": "Part4 Add(Tags, ManyToMany, Join)",
			"item": [
				{
					"name": "getAllPosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Title</th>\r",
									"        <th>Description</th>\r",
									"        <th>Tags</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{title}}</td>\r",
									"            <td>{{description}}</td>\r",
									"            <td>\r",
									"                <ul>\r",
									"                    {{#each tags}}\r",
									"                        <li>{{name}}</li>\r",
									"                    {{/each}}\r",
									"                </ul>\r",
									"            </td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:47:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"React Native\",\n        \"description\": null,\n        \"tags\": []\n    },\n    {\n        \"id\": 3,\n        \"title\": \"HTML\",\n        \"description\": \"HTML Desc\",\n        \"tags\": [\n            {\n                \"id\": 2,\n                \"name\": \"hyper text markup language\"\n            },\n            {\n                \"id\": 1,\n                \"name\": \"html\"\n            }\n        ]\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Python\",\n        \"description\": \"Python Desc\",\n        \"tags\": [\n            {\n                \"id\": 3,\n                \"name\": \"py\"\n            },\n            {\n                \"id\": 4,\n                \"name\": \"python\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Angualar\",\r\n    \"description\": \"Angualar Desc\",\r\n    \"tags\": [\r\n        \"Angular\",\r\n        \"ng\",\r\n        \"IT\"\r\n    ] \r\n}\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Angualar\",\r\n    \"description\": \"Angualar Desc\",\r\n    \"tags\": [\r\n        \"Angular\",\r\n        \"ng\",\r\n        \"IT\"\r\n    ] \r\n}\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:50:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"tags\": [\n        \"angular\",\n        \"ng\",\n        \"it\"\n    ],\n    \"message\": \"Post Created Successfully \",\n    \"description\": \"Angualar Desc\"\n}"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id [Present]",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/5",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"5"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:51:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"description\": \"Angualar Desc\",\n    \"tags\": [\n        {\n            \"id\": 6,\n            \"name\": \"it\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"ng\"\n        },\n        {\n            \"id\": 7,\n            \"name\": \"angular\"\n        }\n    ]\n}"
						},
						{
							"name": "get Post By Id [Not-Present]",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/2",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:52:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:52:49.672+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User With 2Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.lambda$getpost$0(PostService.java:79)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:79)\\r\\n\\tat com.example.Blogifi.controllers.PostController.GetPostById(PostController.java:50)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User With 2Not Found\",\n    \"path\": \"/posts/2\"\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:56:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						},
						{
							"name": "Update Post By Id [Wrong ReqBodyParam] 400",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n//     \"title\": \"React\",\r\n//     \"desc\": \"R Desc\",\r\n//     \"tags\": [\r\n//         \"R\",\r\n//         \"React\",\r\n//         \"developer\"\r\n//     ]\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:53:44 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:53:44.404+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: No content to map due to end-of-input\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:409)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:357)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:204)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:176)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:150)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:226)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:180)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input\\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1]\\r\\n\\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\\r\\n\\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._initForReading(ObjectReader.java:360)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2115)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:398)\\r\\n\\t... 51 more\\r\\n\",\n    \"message\": \"JSON parse error: No content to map due to end-of-input\",\n    \"path\": \"/posts/3\"\n}"
						},
						{
							"name": "Update Post By Id [Not-Present] 404",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n    \"title\": \"React\",\r\n    \"desc\": \"R Desc\",\r\n    \"tags\": [\r\n        \"R\",\r\n        \"React\",\r\n        \"developer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:54:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:54:54.081+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User With 2Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.lambda$getpost$0(PostService.java:79)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:79)\\r\\n\\tat com.example.Blogifi.services.PostService.Update(PostService.java:83)\\r\\n\\tat com.example.Blogifi.controllers.PostController.UpdatePostById(PostController.java:56)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User With 2Not Found\",\n    \"path\": \"/posts/2\"\n}"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:58:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Reactive\",\n    \"tags\": [\n        \"React N\",\n        \"developer\",\n        \"it\",\n        \"RN\"\n    ],\n    \"message\": \"Post Updated Successfully\",\n    \"description\": null\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:52:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "> Part 4 -  \n1\\. Added Tags in MySQL DB  \n2\\. (@ManyToMany(cascade ={CascadeType.ALL}), @JoinTable(name=&quot;p_t&quot;,jointColumn = {@JointColumn(name=&quot;post_id&quot;), inverseJointColumn = {@JointColumn(name=&quot;tag_id&quot;)})) Set&lt;Tag&gt; tags = new HashSet&lt;&gt;();  \n3\\. changed PostRequestDto and ResponseRequestDto  \n4\\. While Create Post, check tag if Exists then don&amp;#x27;t add  \n5\\. While Getting RequestDto -&gt; alter Data Using Stream().map(()-&gt;Set&lt;Tag&gt; new Tag()) and then -&gt; store in Post Entity Repository DB -&gt; Return Stream.Map again back to Set of Strings"
		},
		{
			"name": "Part5",
			"item": [
				{
					"name": "getAllPosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 17 Jan 2025 05:03:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"title\": \"HTML\",\n        \"tags\": [\n            \"hyper text markup language\",\n            \"html\"\n        ],\n        \"description\": \"HTML Desc\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    },\n    {\n        \"id\": 5,\n        \"title\": \"Angualar\",\n        \"tags\": [\n            \"angular\",\n            \"ng\",\n            \"it\"\n        ],\n        \"description\": \"Angualar Desc\"\n    },\n    {\n        \"id\": 6,\n        \"title\": \"React Native\",\n        \"tags\": [\n            \"react native\",\n            \"rn\",\n            \"java developer\"\n        ],\n        \"description\": \"RN Desc\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Nine\",\r\n    \"description\": \"Nine Desc\",\r\n    \"tags\": [\r\n        \"Nine\",\r\n        \"IT\"\r\n    ] \r\n}\r\n\r\n// {\r\n//     \"title\": \"Seven\",\r\n//     \"description\": \"Seven Desc\",\r\n//     \"tags\": [\r\n//         \"Seven\",\r\n//         \"IT\"\r\n//     ] \r\n// }\r\n// {\r\n//     \"title\": \"Angualar\",\r\n//     \"description\": \"Angualar Desc\",\r\n//     \"tags\": [\r\n//         \"Angular\",\r\n//         \"ng\",\r\n//         \"IT\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Angualar\",\r\n    \"description\": \"Angualar Desc\",\r\n    \"tags\": [\r\n        \"Angular\",\r\n        \"ng\",\r\n        \"IT\"\r\n    ] \r\n}\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:50:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"tags\": [\n        \"angular\",\n        \"ng\",\n        \"it\"\n    ],\n    \"message\": \"Post Created Successfully \",\n    \"description\": \"Angualar Desc\"\n}"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id [Present]",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/5",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"5"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 17 Jan 2025 05:04:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"tags\": [\n        \"angular\",\n        \"ng\",\n        \"it\"\n    ],\n    \"description\": \"Angualar Desc\"\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:56:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						},
						{
							"name": "Update Post By Id [Wrong ReqBodyParam] 400",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n//     \"title\": \"React\",\r\n//     \"desc\": \"R Desc\",\r\n//     \"tags\": [\r\n//         \"R\",\r\n//         \"React\",\r\n//         \"developer\"\r\n//     ]\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:53:44 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:53:44.404+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: No content to map due to end-of-input\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:409)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:357)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:204)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:176)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:150)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:226)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:180)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input\\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1]\\r\\n\\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\\r\\n\\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._initForReading(ObjectReader.java:360)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2115)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:398)\\r\\n\\t... 51 more\\r\\n\",\n    \"message\": \"JSON parse error: No content to map due to end-of-input\",\n    \"path\": \"/posts/3\"\n}"
						},
						{
							"name": "Update Post By Id [Not-Present] 404",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n    \"title\": \"React\",\r\n    \"desc\": \"R Desc\",\r\n    \"tags\": [\r\n        \"R\",\r\n        \"React\",\r\n        \"developer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:54:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:54:54.081+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User With 2Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.lambda$getpost$0(PostService.java:79)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:79)\\r\\n\\tat com.example.Blogifi.services.PostService.Update(PostService.java:83)\\r\\n\\tat com.example.Blogifi.controllers.PostController.UpdatePostById(PostController.java:56)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User With 2Not Found\",\n    \"path\": \"/posts/2\"\n}"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:58:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Reactive\",\n    \"tags\": [\n        \"React N\",\n        \"developer\",\n        \"it\",\n        \"RN\"\n    ],\n    \"message\": \"Post Updated Successfully\",\n    \"description\": null\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:52:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "> 1\\. MySQL setup in pom.xml and in application.properties mysql-connector-j  \n2\\. Updated MySQLQuerie.sql  \n3\\. Used @Entity form jakarta from spring-boot-Starter-data-JPA Dependency  \n4\\. @Entity name will create same in Database @Id \\[PK\\] @GenerateValue(strategy = GenerationType.IDENTITY)  \n5\\. Add - JPA Repository Package &gt; PostRepository.java Interface extends JpaRepository with its DataType in TableName, PK type&lt;Posts, Integer&gt;  \n6\\. Add - RequestDto and ResponseDto ()"
		},
		{
			"name": "Part6",
			"item": [
				{
					"name": "getAllPosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "getAllPosts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 17 Jan 2025 05:03:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"title\": \"HTML\",\n        \"tags\": [\n            \"hyper text markup language\",\n            \"html\"\n        ],\n        \"description\": \"HTML Desc\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    },\n    {\n        \"id\": 5,\n        \"title\": \"Angualar\",\n        \"tags\": [\n            \"angular\",\n            \"ng\",\n            \"it\"\n        ],\n        \"description\": \"Angualar Desc\"\n    },\n    {\n        \"id\": 6,\n        \"title\": \"React Native\",\n        \"tags\": [\n            \"react native\",\n            \"rn\",\n            \"java developer\"\n        ],\n        \"description\": \"RN Desc\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create Posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"title\": \"Eight\",\r\n//     \"description\": \"Eight Desc\",\r\n//     \"tags\": [\r\n//         \"Eight\",\r\n//         \"IT\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Seven\",\r\n//     \"description\": \"Seven Desc\",\r\n//     \"tags\": [\r\n//         \"Seven\",\r\n//         \"IT\"\r\n//     ] \r\n// }\r\n// {\r\n//     \"title\": \"Angualar\",\r\n//     \"description\": \"Angualar Desc\",\r\n//     \"tags\": [\r\n//         \"Angular\",\r\n//         \"ng\",\r\n//         \"IT\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n{\r\n    \"title\": \"Python\",\r\n    \"description\": \"Python Desc\",\r\n    // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n    \"tags\": [\r\n        \"Python\",\r\n        \"Py\"\r\n    ] \r\n}\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Create Posts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Angualar\",\r\n    \"description\": \"Angualar Desc\",\r\n    \"tags\": [\r\n        \"Angular\",\r\n        \"ng\",\r\n        \"IT\"\r\n    ] \r\n}\r\n\r\n// {\r\n//     \"title\": \"React\",\r\n//     \"description\": \"React Desc\"\r\n//     // Worries 😯 \r\n// }\r\n\r\n// {\r\n//     \"title\": \"Python\",\r\n//     \"description\": \"Python Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"Python\",\r\n//         \"Py\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"HTML\",\r\n//     \"description\": \"HTML Desc\",\r\n//     // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, Description and tags // but not using in Post Entity\r\n//     \"tags\": [\r\n//         \"HTML\",\r\n//         \"Hyper Text Markup Language\"\r\n//     ] \r\n// }\r\n\r\n// {\r\n//     \"title\": \"React Native\",\r\n//     \"description\": \"RN Desc\",\r\n//     \"tags\": [\r\n//         \"RN\",\r\n//         \"React Native\",\r\n//         \"java developer\"\r\n//     ] // Even if Tags are passed we are not Taking it AS Post only contains id(PK, non-Auto Increment), title, and Description and tags\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:50:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"tags\": [\n        \"angular\",\n        \"ng\",\n        \"it\"\n    ],\n    \"message\": \"Post Created Successfully \",\n    \"description\": \"Angualar Desc\"\n}"
						}
					]
				},
				{
					"name": "get Post By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id [Present]",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/5",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"5"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 17 Jan 2025 05:04:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"title\": \"Angualar\",\n    \"tags\": [\n        \"angular\",\n        \"ng\",\n        \"it\"\n    ],\n    \"description\": \"Angualar Desc\"\n}"
						}
					]
				},
				{
					"name": "Update Post By Id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Post By Id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"React N\",\r\n    \"desc\": \"RN Desc\",\r\n    \"tags\": [\r\n        \"RN\",\r\n        \"React N\",\r\n        \"developer\", \r\n        \"it\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:56:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Post Updated Successfully"
						},
						{
							"name": "Update Post By Id [Wrong ReqBodyParam] 400",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n//     \"title\": \"React\",\r\n//     \"desc\": \"R Desc\",\r\n//     \"tags\": [\r\n//         \"R\",\r\n//         \"React\",\r\n//         \"developer\"\r\n//     ]\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"3"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:53:44 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:53:44.404+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: No content to map due to end-of-input\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:409)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:357)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:204)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:176)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:150)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:226)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:180)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input\\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1]\\r\\n\\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\\r\\n\\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._initForReading(ObjectReader.java:360)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2115)\\r\\n\\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)\\r\\n\\tat org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:398)\\r\\n\\t... 51 more\\r\\n\",\n    \"message\": \"JSON parse error: No content to map due to end-of-input\",\n    \"path\": \"/posts/3\"\n}"
						},
						{
							"name": "Update Post By Id [Not-Present] 404",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 33, //Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n    \"title\": \"React\",\r\n    \"desc\": \"R Desc\",\r\n    \"tags\": [\r\n        \"R\",\r\n        \"React\",\r\n        \"developer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:54:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-01-16T23:54:54.081+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"trace\": \"org.springframework.web.server.ResponseStatusException: 404 NOT_FOUND \\\"User With 2Not Found\\\"\\r\\n\\tat com.example.Blogifi.services.PostService.lambda$getpost$0(PostService.java:79)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.example.Blogifi.services.PostService.getpost(PostService.java:79)\\r\\n\\tat com.example.Blogifi.services.PostService.Update(PostService.java:83)\\r\\n\\tat com.example.Blogifi.controllers.PostController.UpdatePostById(PostController.java:56)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"User With 2Not Found\",\n    \"path\": \"/posts/2\"\n}"
						}
					]
				},
				{
					"name": "Update Partial Post By Id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Partial Post By Id",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend  // we using Path Param ID i.e @PathVariable\r\n        \"title\": \"Reactive\"\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        // \"tags\": [\r\n        //     \"R\",\r\n        //     \"React\",\r\n        //     \"developer\"\r\n        // ] //Removed\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 23:58:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Reactive\",\n    \"tags\": [\n        \"React N\",\n        \"developer\",\n        \"it\",\n        \"RN\"\n    ],\n    \"message\": \"Post Updated Successfully\",\n    \"description\": null\n}"
						}
					]
				},
				{
					"name": "delete By Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/posts/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"posts",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "delete By Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"id\": 33,//Not using in Backend\r\n        \"title\": \"React\",\r\n        //\"desc\": \"R Desc\", // Updating Partially \r\n        \"tags\": [\r\n            \"R\",\r\n            \"React\",\r\n            \"developer\"\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/posts/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 16 Jan 2025 13:52:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "get Post By title id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/title?value=python",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"title"
							],
							"query": [
								{
									"key": "value",
									"value": "python"
								}
							]
						}
					},
					"response": [
						{
							"name": "get Post By Id Copy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/title?value=python",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"title"
									],
									"query": [
										{
											"key": "value",
											"value": "python"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 21 Jan 2025 13:23:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    }\n]"
						}
					]
				},
				{
					"name": "get Post By tags name",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/posts/tag?value=py",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"posts",
								"tag"
							],
							"query": [
								{
									"key": "value",
									"value": "py"
								}
							]
						}
					},
					"response": [
						{
							"name": "get Post By title id Copy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/posts/tag?value=py",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"posts",
										"tag"
									],
									"query": [
										{
											"key": "value",
											"value": "py"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 21 Jan 2025 13:24:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"Python\",\n        \"tags\": [\n            \"python\",\n            \"py\"\n        ],\n        \"description\": \"Python Desc\"\n    }\n]"
						}
					]
				}
			],
			"description": "> 1\\. MySQL setup in pom.xml and in application.properties mysql-connector-j  \n2\\. Updated MySQLQuerie.sql  \n3\\. Used @Entity form jakarta from spring-boot-Starter-data-JPA Dependency  \n4\\. @Entity name will create same in Database @Id \\[PK\\] @GenerateValue(strategy = GenerationType.IDENTITY)  \n5\\. Add - JPA Repository Package &gt; PostRepository.java Interface extends JpaRepository with its DataType in TableName, PK type&lt;Posts, Integer&gt;  \n6\\. Add - RequestDto and ResponseDto ()"
		}
	]
}